package com.beaver.feb061.sns;

import java.io.File;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.beaver.db.manager.BeaverDBManager;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

public class MemberDAO {
	
	// 회원가입
	public static void signup(HttpServletRequest req) {
		// 일단 파일업로드 시도
		String path = null;
		MultipartRequest mr = null;
		
		try {
			path = req.getServletContext().getRealPath("img");
			System.out.println(path);
			mr = new MultipartRequest(req, path, 10 * 1024 * 1024, "UTF-8", new DefaultFileRenamePolicy());
		} catch (Exception e) {	// 파일 업로드 실패의 경우
			e.printStackTrace();
			req.setAttribute("r", "회원가입 실패(사진파일 용량 초과)");
			return;	// 업로드에 실패하면 뒤에 남은 DB작업
					//	은 하짐 말자 (강제종료)
		}
		
		// 파일 업로드 성공시에 계속 진행
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = BeaverDBManager.connect("sexy");
			
			String id = mr.getParameter("id");
			String pw = mr.getParameter("pw");
			String name = mr.getParameter("name");
			String phone = mr.getParameter("phone");
			
			String y = mr.getParameter("y");
			int m = Integer.parseInt(mr.getParameter("m"));
			int d = Integer.parseInt(mr.getParameter("d"));
			String birthday = String.format("%s-%02d-%02d", y, m, d);
			System.out.println("생년월일: " + birthday);
			String photo = mr.getFilesystemName("photo");
			if (photo != null) {
			    photo = URLEncoder.encode(photo, "UTF-8").replace("+", " ");
			} else {
			    photo = "cat.png";  // 기본 이미지 설정
			}
			
			String sql = "insert into feb06_member values( "
					+ "?, ?, ?, ?, to_date(?, 'YYYYMMDD'), ?)";
			pstmt = con.prepareStatement(sql);
			
			pstmt.setString(1, id);
			pstmt.setString(2, pw);
			pstmt.setString(3, name);
			pstmt.setString(4, phone);
			pstmt.setString(5, birthday);
			pstmt.setString(6, photo);
			
			if (pstmt.executeUpdate() == 1) {
				req.setAttribute("r", "회원가입 성공");
				
			}
		} catch (Exception e) {	// ID중복, DB연결상태가 안좋은 경우일겁니다
			e.printStackTrace();
			// DB쪽 문제로 가입은 실패지만,
			// 현 메소드의 처음 부분) 사진파일이 업로드는 되어있는 상태
			// 사진파일 지워줘야(Java로)
			File f = new File(path + "/" + mr.getFilesystemName("photo"));	// 파일을 불러오고? 근데 왜 new?
			f.delete(); // 파일은 지워버릴 거구요
			req.setAttribute("r", "회원가입 실패, 아이디가 중복이거나 연결상태가 좋지 않습니다");
		}
			BeaverDBManager.close(con, pstmt, null);
	}
	
	public static void login(HttpServletRequest req, HttpServletResponse res) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			con = BeaverDBManager.connect("sexy");
			
			req.setCharacterEncoding("UTF-8");
			String id = req.getParameter("id");
			String pw = req.getParameter("pw");
			
			// String sql = "select * feb06_sns"; // 비교 확인을 하려면 불러오고 비교를 해야하는데 왼쪽처럼 전부 불러오면 개수가 만개이상처럼 많아질때는 효율적이지 않음
			// String sql = "select * feb06_sns where id=? and pw=?"; 
			// 해킹기법 - SQL Injection (해킹 기법중 이런게 있다)
			//		보안상 취약점을 이용해서
			//		데이터베이스가 비정상적인 동작을 하게 하는 기법
			//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
			
			String sql = "select * from feb06_member where id = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			
			if (rs.next()) { // 데이터가 있는지 + 그 데이터를 가리키게 // 안전장치
				String dbPw = rs.getString("pw"); // db에 있는 비밀번호와
				if (dbPw.equals(pw)) { // 입력한 비밀번호가 같(은지)다면
					Member m = new Member(
							rs.getString("id"), dbPw, rs.getString("name"),
							rs.getString("phone"), rs.getDate("birth"),
							URLDecoder.decode(rs.getString("photo"), "UTF-8"));
					req.getSession().setAttribute("loginMember", m);
					req.getSession().setMaxInactiveInterval(600);
					
					Cookie c = new Cookie("lastLoginId", id);
					c.setMaxAge(60 * 60 * 24 * 5);
					res.addCookie(c);
					req.setAttribute("r", "로그인 성공");
				} else { // db의 비밀번호와 입력한 비밀번호가 다른경우
					req.setAttribute("r", "로그인실패(PW오류)");
				}
			} else {
				req.setAttribute("r", "로그인실패(미가입ID)");
			}
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("r", "로그인실패(DB서버)");
		}
		BeaverDBManager.close(con, pstmt, rs);
	}
	
	// 로그인상태 확인하기위한 메소드
	public static boolean loginCheck(HttpServletRequest req) {
		Member m = (Member) req.getSession().getAttribute("loginMember");
		
		if (m != null) {
			// 로그인 성공 or 상태 유지시
			req.setAttribute("lp", "welcome.jsp");
			return true;
		}
		// 로그인상태가 아니거나 로그인 실패시
		req.setAttribute("lp", "login.jsp");
		return false;
	}
	
	//로그아웃
	public static void logout(HttpServletRequest req) {
		// 세션 끊기 : 아래처럼 끊으면 다른 세션값들도 같이 끊어지기에 비추
		// req.getSession().setMaxInactiveInterval(-1);
		
		// Member에 대한 session만 null로 바꿔주면 될 것 같다
		req.getSession().setAttribute("loginMember", null);
		req.setAttribute("r", "로그아웃 성공");
		
		
	}
	
	
}




























