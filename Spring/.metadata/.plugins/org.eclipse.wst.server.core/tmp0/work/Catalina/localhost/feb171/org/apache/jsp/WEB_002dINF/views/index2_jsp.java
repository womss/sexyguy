/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-02-17 08:17:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"resources/jQuery.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// alert('sdf');\r\n");
      out.write("		\r\n");
      out.write("		// AJAX (Asynchronous JavaScript And XML)\r\n");
      out.write("		//	: 자바스크립트를 통해서 서버에 데이터를 요청하는 것\r\n");
      out.write("		$(\"#btn\").click(function() {\r\n");
      out.write("			// alert('asdf');\r\n");
      out.write("			\r\n");
      out.write("			// AJAX 진행\r\n");
      out.write("			/* $.ajax({\r\n");
      out.write("				url: \"fruit.getXML\", // url속성에 value(Controller에서 설정한 요청주소)\r\n");
      out.write("				success: function(asd) { // 요청 성공하면 function 동작\r\n");
      out.write("					// alert(asdf); // XML문서라는 것이 확인\r\n");
      out.write("					\r\n");
      out.write("					// DOM객체 하나 불러올때마다 나오는 콜백함수\r\n");
      out.write("					$(asd).find(\"fruit\").each(function(i, f) {\r\n");
      out.write("						alert(i + \")\" + f); // index(0번부터)\r\n");
      out.write("											// fruit 한덩어리 f\r\n");
      out.write("						let f_name = $(f).find(\"f_name\").text();\r\n");
      out.write("						let f_price = $(f).find(\"f_price\").text();\r\n");
      out.write("						alert(f_name + \"]\" + f_price);\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					});\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}); */\r\n");
      out.write("			\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// fruit.getXML에 요청해서\r\n");
      out.write("		// 나오는 모든 데이터들을 가지고\r\n");
      out.write("		// <table> 을 구성해주세요!\r\n");
      out.write("		\r\n");
      out.write(" 			$.ajax({\r\n");
      out.write("				url: \"fruit.getXML\",\r\n");
      out.write("				success: function(asdf){\r\n");
      out.write("					$(asdf).find(\"fruit\").each(function(i, f){\r\n");
      out.write("						let f_name = $(f).find(\"f_name\").text();\r\n");
      out.write("						let f_price = $(f).find(\"f_price\").text();\r\n");
      out.write("						\r\n");
      out.write("						let nameTd = $(\"<td></td>\").text(f_name);\r\n");
      out.write("						let priceTd = $(\"<td></td>\").text(f_price);\r\n");
      out.write("						\r\n");
      out.write("						let tr = $(\"<tr></tr>\").append(nameTd, priceTd);\r\n");
      out.write("						\r\n");
      out.write("						$(\"#fruitTbl\").append(tr);						// 근데 이거 계속 추가됨\r\n");
      out.write("						//$(\"#fruitTbl tbody\").empty();\r\n");
      out.write("				});\r\n");
      out.write("					\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write(" 	\r\n");
      out.write("	});\r\n");
      out.write("		// input에 숫자를 입력받아서 => 검색버튼을 누르면				// btn input\r\n");
      out.write("		// 입력한 숫자 이하의 가격인 과일들의 이름, 가격 데이터를 가지고		// let a =  input <= x  \r\n");
      out.write("		// <table> 구성하기! (fruitTbl)\r\n");
      out.write("		// select * from feb17_fruit where s_price<=fruitInput\r\n");
      out.write("		$(\"#fruitSearchBtn\").click(function() {	// 검색버튼 눌렀을 때\r\n");
      out.write("		let frVal = $(\"#fruitInput\").val();		// input값을 frVal에 담고\r\n");
      out.write("		if (frVal === \"\") {						// input의 값이 빈칸일 때\r\n");
      out.write("			frVal = 0;							// frVal을 0으로\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			// url: \"fruit.searchXML?f_price=\" + frVal, // 요청주소 + 조건\r\n");
      out.write("			url: \"fruit.searchXML\",\r\n");
      out.write("			data: {f_price: frVal},\r\n");
      out.write("			success: function(qwer) {\r\n");
      out.write("				$(\"#fruitTbl\").empty(); // 테이블 비우기\r\n");
      out.write("				$(qwer).find(\"fruit\").each(function(i, f){\r\n");
      out.write("					let f_name = $(f).find(\"f_name\").text();\r\n");
      out.write("					let f_price = $(f).find(\"f_price\").text();\r\n");
      out.write("					\r\n");
      out.write("					let nameTd = $(\"<td></td>\").text(f_name);\r\n");
      out.write("					let priceTd = $(\"<td></td>\").text(f_price);\r\n");
      out.write("					\r\n");
      out.write("					let tr = $(\"<tr></tr>\").append(nameTd, priceTd);\r\n");
      out.write("					\r\n");
      out.write("					$(\"#fruitTbl\").append(tr);						// 근데 이거 계속 추가됨\r\n");
      out.write("			});\r\n");
      out.write("			// 여기까진 성공했을때 내용\r\n");
      out.write("			}, // 실패했을 때\r\n");
      out.write("			error: function(asd) {\r\n");
      out.write("				$(\"#fruitTbl\").empty(); // 테이블 비우기\r\n");
      out.write("				$(\"#fruitTbl\").append(\"<tr><td colspan='2'>오류가 났습니다 !</td></tr>\");\r\n");
      out.write("			}\r\n");
      out.write("		\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("});\r\n");
      out.write("		$(\"#fruitInput\").keyup(function(e) {\r\n");
      out.write("		//	if (e.keyCode == 13) {\r\n");
      out.write("				$(\"#fruitTbl\").empty();\r\n");
      out.write("				$(\"#fruitSearchBtn\").trigger(\"click\");\r\n");
      out.write("	//		}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<table id=\"fruitTbl\" border=\"1\"></table>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<input id=\"fruitInput\"> <button id=\"fruitSearchBtn\">검색</button><p>\r\n");
      out.write("	\r\n");
      out.write("	<button id=\"btn\">버튼</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
